^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Selection and projection query
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

What are the titles of the books that the user with username aapple has checked out?

(SELECT h.title
 FROM Makes_Reservation_or_Rental mror, Rental_Due_On r, Has_Books h, Members m
 WHERE mror.rental_id = r.rental_id AND m.member_id = mror.member_id AND h.isbn = r.isbn AND m.username = 'aapple');

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Join query
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

What are the titles of the books that the user with username aaple has, that are overdue.

(SELECT UNIQUE h.title
 FROM Makes_Reservation_Or_Rental mror, Members m, Rental_Due_On r, Has_Books h
 WHERE mror.rental_id = r.rental_id AND m.member_id = mror.member_id AND r.isbn = h.isbn AND m.username = 'aapple'
 AND mror.rental_id NOT IN (select ro.rental_id from returned_on ro);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

===================================================================================================================
Division query
===================================================================================================================

What are the titles of the books that are at all branches?

(SELECT DISTINCT h1.title
 FROM Has_Books h1
 WHERE NOT EXISTS (SELECT NULL
		   FROM Branches b
		   WHERE NOT EXISTS (SELECT NULL
				     FROM Has_Books h2
				     WHERE h1.isbn=h2.isbn AND b.branch_id=h2.branch_id))
ORDER BY h1.title ASC);

===================================================================================================================

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Aggregation query
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Pick one query that requires the use of aggregation (min, max, average, or count are all fine).

How many copies of the book with the title "Win In 20 Days" does branch 1 have?

(SELECT COUNT(*)
 FROM Book_Copy c, Has_Books b
 WHERE c.isbn = b.isbn AND b.title = 'Win In 20 Days' AND c.branch_id = '0001');

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Nested aggregation with group-by
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Pick one query that finds the average for each group
and then finds either the minimum or maximum across all those averages.

Copies of books for each ISBN at a given branch as a view. Then select isbn with the least number of copies from the view.

create view copies_of_books(copies, isbn) as
select count(bc.copy_id), bc.isbn
from Book_Copy bc
where bc.branch_id = '0001'
group by bc.isbn;

select isbn, copies
from copies_of_books
where copies = (select min(copies) from copies_of_books);


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

###################################################################################################################
Delete operation:
###################################################################################################################

Delete rental by rental_id:

DELETE FROM Rental_Due_On
WHERE rental_id = '0000000001';


Delete rental once book has been returned by member:

DELETE from Rental_Due_On
WHERE rental_id in (SELECT rental_id
		    FROM Makes_Reservation_Or_Rental
		    WHERE member_id = '00000001');

###################################################################################################################

*******************************************************************************************************************
Update operation:
*******************************************************************************************************************

UPDATE Members
SET owing = 5.5
WHERE member_id = '00000002';

UPDATE Members
SET owing = -5.5
WHERE member_id = '00000002'; (violates check constraint)

UPDATE Members
SET username = 'a20'
WHERE member_id = '00000001'; (violates check constraint)
  
UPDATE Members
SET username = 'aapple99' 
WHERE member_id = '00000001';

*******************************************************************************************************************
