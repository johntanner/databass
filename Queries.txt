^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Selection and projection query
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

What are the titles of the books that the user with username aapple has checked out?

(SELECT h.title
 FROM Makes_Reservation_or_Rental mror, Rental_Due_On r, Has_Books h, Members m
 WHERE mror.rental_id = r.rental_id AND m.member_id = mror.member_id AND h.isbn = r.isbn AND m.username = 'aapple');

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Join query
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

What are the titles of the books that the user with username aaple has, that are overdue.

(SELECT h.title
 FROM Makes_Reservation_Or_Rental mror, Members m, Rental_Due_On r, Has_Books h
 WHERE mror.rental_id = r.rental_id AND m.member_id = mror.member_id AND r.isbn = h.isbn
 AND r.end_date < (select CURRENT_TIMESTAMP from DUAL) AND m.username = 'aapple');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

===================================================================================================================
Division query
===================================================================================================================

What are the titles of the books that are at all branches?

(SELECT DISTINCT h1.title
 FROM Has_Books h1
 WHERE NOT EXISTS (SELECT NULL
		   FROM Branches b
		   WHERE NOT EXISTS (SELECT NULL
				     FROM Has_Books h2
				     WHERE h1.isbn=h2.isbn AND b.branch_id=h2.branch_id))
ORDER BY h1.title ASC);

===================================================================================================================

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Aggregation query
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Pick one query that requires the use of aggregation (min, max, average, or count are all fine).

How many copies of book X does branch Y have?

(SELECT COUNT(*)
 FROM Book_Copy c, Has_Books b
 WHERE c.isbn = b.isbn AND b.title = X AND c.branch_id = Y);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Nested aggregation with group-by
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Pick one query that finds the average for each group
and then finds either the minimum or maximum across all those averages.

$$$$$$$$$$$$$$$$$$
|  UNFINISHED    |
$$$$$$$$$$$$$$$$$$

(SELECT COUNT(distinct h.isbn), b.name
 FROM Has_Books h, branches b
 WHERE h.branch_id = b.branch_id
 GROUP BY b.name);

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

###################################################################################################################
Delete operation
###################################################################################################################

Implement a cascade-on-delete situation

Delete rental by rental_id:

DELETE FROM Rental_Due_On
WHERE rental_id = '0000000001';


Delete rental once book has been returned by member:

DELETE from Rental_Due_On
WHERE rental_id in (SELECT rental_id
		    FROM Makes_Reservation_Or_Rental
		    WHERE member_id = '00000001');


###################################################################################################################

*******************************************************************************************************************
Update operation:
*******************************************************************************************************************

Implement a constraint using the check statement

UPDATE Members
SET owing = 5.5
WHERE member_id = '00000002';

UPDATE Members
SET owing = -5.5
WHERE member_id = '00000002'; (violates check constraint)

UPDATE Members
SET username = 'a20'
WHERE member_id = '00000001'; (violates check constraint)
  
UPDATE Members
SET username = 'aapple99' 
WHERE member_id = '00000001';

*******************************************************************************************************************
